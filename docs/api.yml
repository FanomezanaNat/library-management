openapi: 3.0.3
info:
  title: Library API
  version: 1.0.1
  description: STD22005
servers:
  - url: https://library.com
tags:
  - name: books
  - name: authors
paths:
  /books:
    get:
      tags:
        - "books"
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: startDate
          description: Start date of the release interval
          required: false
          schema:
            type: string
            format: datetime
        - in: query
          name: endDate
          description: End date of the release interval
          required: false
          schema:
            type: string
            format: datetime
        #TODO3: add parameter to filter books by intervals of dates of the releaseDate
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    put:
      tags:
        - "books"
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'

  /authors:
    #TODO2: complete GET (can be filtered by name) - PUT - DELETE
    get:
      tags:
        - "authors"
      summary: get all authors
      operationId: getAuthors
      parameters:
        - in: query
          name: return authors by given name
          required: false
          schema:
            type: string
      responses:
        200:
          description: the list of filtered authors
          content:
            application/json:
              schema:
               type: array
               items:
                $ref: '#/components/schemas/Author'
    put:
      tags:
        - "authors"
      summary: Create or update a list of Author
      operationId: crupdateAuthor
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          description: The list of created or updated authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    delete:
      tags:
        - "authors"
      summary: delete an author
      operationId: deleteAuthor
      parameters:
        - in: query
          required: true
          name: author's name to delete
          schema:
            type: string
      responses:
        204:
          description: author deleted
  
  
components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        author:
                  #TODO1: set it as a component with properties : id, name, sex (M or F)

          $ref: "#/components/schemas/Author"
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    Author:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        sex:
          type: string
          enum:
            - M
            - F
    crupdateBook:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: datetime

          
     
